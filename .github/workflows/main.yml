name: CI

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest

    timeout-minutes: 1440  # Timeout set to 24 hours

    steps:
    - name: Download
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip

    - name: Extract
      run: Expand-Archive ngrok.zip

    - name: Auth
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable TS
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0

    - run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

    - run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

    - name: Set Password for runneradmin
      run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)

    - name: Create Tunnel
      run: .\ngrok\ngrok.exe tcp 3389

    - name: Keep Alive
      run: |
        while ($true)
        {
          Write-Output "Keep alive..."
          # Check connection status and take appropriate action if necessary
          if (-not (Test-NetConnection -ComputerName localhost -Port 3389)) {
            Write-Output "Connection lost. Restarting tunnel..."
            Stop-Process -Name ngrok -Force -ErrorAction SilentlyContinue
            Start-Process -FilePath ".\ngrok\ngrok.exe" -ArgumentList "tcp 3389" -NoNewWindow
          }
          Start-Sleep -Seconds 300  # Wait for 5 minutes before the next iteration
        }
